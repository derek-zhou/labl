#! /usr/bin/perl -w
#
# labl: main labl script

use Mojo::Base -strict;
use Labl;

sub do_help {
    print <<EOT
usage:
    labl COMMAND [LABEL] files

    labl is a tool to manage labels on files

    Valid commands include:
    help                print this help text
    list                list all existing labels
    show FILES          show labels associated with each file
    rm FILES            rm FILES, fix labels
    mv FILES DEST       mv FILES to DEST which must be a dir, fix labels
    mv SRC DEST         rename SRC to DEST, fix labels
    add LABEL FILES     add LABEL to FILES
    drop LABEL FILES    drop LABEL from FILES
    grep LABEL FILES    filter FILES down to those labeled with LABEL
EOT
}

sub do_list {
    my $labl = shift;
    foreach (@{$labl->all_labels}) {
	say $_;
    }
}

sub do_show {
    my $labl = shift;
    foreach  (@_) {
	my $canon = $labl->canon_of($_);
	my @labels = $labl->all_labels_of($canon);
	if (scalar(@labels)) {
	    say $_ . ":";
	    say join(" ", @labels);
	}
    }
}

sub do_rm {
    my $labl = shift;
    my @canons = map($labl->canon_of($_), @_);
    my @labels = @{$labl->all_labels};
    foreach my $label (@labels) {
	$labl->drop_all_with($label, @canons);
    }
    foreach (@_) {
	unlink($_);
    }
}

sub do_mv {
    my $labl = shift;
    my $dest = pop;
    my %mv_map;
    # is it a dir
    if (substr($dest, -1) eq "/") {
	foreach (@_) {
	    my $l = rindex($_, "/");
	    my $basename = ($l >= 0) ? substr($_, $l + 1) : $_;
	    $mv_map{$_} = $dest . $basename;
	}
    } else {
	die "mv of more than one file require an dir at last"
	    unless (scalar(@_) == 1);
	$mv_map{shift(@_)} = $dest;
    }
    return do_real_mv($labl, \%mv_map);
}

sub do_real_mv {
    my ($labl, $mv_map) = @_;
    my %canon_mv_map;
    foreach (keys(%{$mv_map})) {
	$canon_mv_map{$labl->canon_of($_)} = $labl->canon_of($mv_map->{$_});
	rename($_, $mv_map->{$_}) or
	    die "cannot rename: $!";
    }
    my @canons = keys(%canon_mv_map);
    foreach my $label (@{$labl->all_labels}) {
	foreach my $canon (@canons) {
	    $labl->rename_with($label, $canon, $canon_mv_map{$canon});
	}
    }
}

sub do_add {
    my $labl = shift;
    my $label = shift;
    my @canons = map($labl->canon_of($_), @_);
    $labl->add_all_with($label, @canons);
}

sub do_drop {
    my $labl = shift;
    my $label = shift;
    my @canons = map($labl->canon_of($_), @_);
    $labl->drop_all_with($label, @canons);
}

sub do_grep {
    my $labl = shift;
    my $label = shift;
    my @canons = map($labl->canon_of($_), @_);
    for (my $i = 0; $i < scalar(@_); $i++) {
	say $_[$i] if ($labl->is_labeled_with($label, $canons[$i]));
    }
}

die "Usage: $0 command ...\n" if (scalar(@ARGV)<1);
my $command = shift(@ARGV);
 SWITCH: {
    # the first 2 commands has no argument
    if ($command eq "help") {
	do_help();
	last SWITCH;
    }
    my $labl = Labl->new->init;
    if ($command eq "list") {
	do_list($labl);
	last SWITCH;
    }
    # the next 3 commands operate on files only
    if ($command eq "show") {
	die "Usage: $0 $command files\n" if (scalar(@ARGV)<1);
	do_show($labl, @ARGV);
	last SWITCH;
    }
    if ($command eq "rm") {
	die "Usage: $0 $command files\n" if (scalar(@ARGV)<1);
	do_rm($labl, @ARGV);
	last SWITCH;
    }
    if ($command eq "mv") {
	die "Usage: $0 $command files\n" if (scalar(@ARGV)<2);
	do_mv($labl, @ARGV);
	last SWITCH;
    }
    # the next 3 commands operate on a LABEL and files
    my $label = shift(@ARGV);
    if ($command eq "add") {
	die "Usage: $0 $command label files\n" if (scalar(@ARGV)<1);
	do_add($labl, $label, @ARGV);
	last SWITCH;
    }
    if ($command eq "drop") {
	die "Usage: $0 $command label files\n" if (scalar(@ARGV)<1);
	die "Error: $label is not a valid label\n"
	    unless ($labl->has_label($label));
	do_drop($labl, $label, @ARGV);
	last SWITCH;
    }
    if ($command eq "grep") {
	die "Usage: $0 $command label files\n" if (scalar(@ARGV)<1);
	die "Error: $label is not a valid label\n"
	    unless ($labl->has_label($label));
	do_grep($labl, $label, @ARGV);
	last SWITCH;
    }
    die "Unknown command: $command\n";
}

__END__

=head1 NAME

labl - tool to manage labels on files

=head1 DESCRIPTION

A label is a short string to be associated with any file. Labl maintains
the label database as organized symlinks in the .labl dir under the
_project's root dir. A project is defined as a directory tree with a
_.labl in it, or failing that, a directory tree with .git in it, in
_which case a .labl dir will be created in the project root dir.
It has the following sub-commands:

=over 4

=item B<help>

Print a short help message

=item B<list>

List all labels already exists in the project

=item B<show> I<FILES>

Show labels associated with each file

=item B<rm> I<FILES>

Remove the files and all label association for them

=item B<mv> I<FILES> I<DEST/>

Move all files to the directory DEST. DEST must have trailing /. Fix the label database.

=item B<mv> I<SRC> I<DEST>

Rename a file from SRC to DEST. Fix the label database.

=item B<add> I<LABEL> I<FILES>

Add LABEL to each file in FILES

=item B<drop> I<LABEL> I<FILES>

Drop LABEL from each file in FILES

=item B<grep> I<LABEL> I<FILES>

Filter FILES down to those associated with LABEL

=back

=head1 COPYRIGHT

Copyright (C) 2019 Derek Zhou E<lt>derek@shannon-data.comE<gt>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
