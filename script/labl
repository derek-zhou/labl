#! /usr/bin/perl -w
#
# labl: main labl script

use strict;
use warnings;
use v5.14;
use Cwd qw(getcwd abs_path);

our $root_dir;
our $cwd;

sub do_help {
    print <<EOT
usage:
    labl COMMAND [LABEL] files

    labl is a tool to manage labels on files

    Valid commands include:
    help                print this help text
    list                list all existing labels
    show FILES          show labels associated with each file
    rm FILES            rm FILES, fix labels
    mv FILES DEST       mv FILES to DEST which must be a dir, fix labels
    mv SRC DEST         rename SRC to DEST, fix labels
    add LABEL FILES     add LABEL to FILES
    drop LABEL FILES    drop LABEL from FILES
    grep LABEL FILES    filter FILES down to those labeled with LABEL
EOT
}

sub all_labels {
    my @labels;
    opendir(my $dh, "$root_dir/.labl") || die "Can't opendir $root_dir/.labl: $!";
    while (readdir $dh) {
	push @labels, $_ unless (/^\./);
    }
    closedir $dh;
    return @labels;
}

sub all_labeled {
    my @links;
    my $label = shift;
    chdir("$root_dir/.labl/$label");
    opendir(my $dh, ".") || die "Can't opendir $root_dir/.labl/$label: $!";
    while (readdir $dh) {
	# all links start with "../../"
	push @links, substr(readlink($_), 6) unless (/^\./);
    }
    closedir $dh;
    chdir($cwd);
    return @links;
}

sub do_list {
    my @labels = all_labels();
    foreach (@labels) {
	say $_;
    }
}

# find the project root dir
sub find_root_dir {
    $cwd = getcwd();
    my $found_dir;
    while(1) {
	my $cwd = getcwd();
	if (-d '.labl') {
	    $found_dir = $cwd;
	    last;
	}
	if (-d '.git') {
	    if (mkdir(".labl")) {
		$found_dir = $cwd;
		last;
	    } else {
		last;
	    }
	}
	last unless(chdir(".."));
    }
    chdir($cwd);
    return $found_dir if ($found_dir);
    return 0;
}

# find the relative file name from root of the project
sub rel_name_from_root {
    # root_dir must be a prefix of the name
    my $name = abs_path(shift);
    return substr($name, length($root_dir)+1);
}

sub do_show {
    my %name_map;
    my %name_abs_map;
    foreach (@_) {
	$name_map{$_} = [];
	$name_abs_map{$_} = rel_name_from_root($_);
    }
    foreach my $label (all_labels()) {
	foreach my $link (all_labeled($label)) {
	    foreach my $file (@_) {
		if ($link eq $name_abs_map{$file}) {
		    push @{$name_map{$file}}, $label;
		}
	    }
	}
    }
    foreach my $file (@_) {
	if (scalar(@{$name_map{$file}})) {
	    my $labels = join(" ",@{$name_map{$file}});
	    say "$file:";
	    say $labels;
	}
    }
}

die "Usage: $0 command ...\n" if (scalar(@ARGV)<1);
my $command = shift(@ARGV);

for ($command) {
    # the first 2 commands has no argument
    if ($_ eq "help") {
	do_help();
	last;
    }
    die "Cannot find project root dir" unless (($root_dir = find_root_dir()));
    if ($_ eq "list") {
	do_list();
	last;
    }
    die "Usage: $0 $command files \n" if (scalar(@ARGV)<1);
    # the next 3 commands operate on files only
    if ($_ eq "show") {
	do_show(@ARGV);
	last;
    }
    if ($_ eq "rm") {
	# do_rm(@ARGV);
	last;
    }
    if ($_ eq "mv") {
	# do_mv(@ARGV);
	last;
    }
    # the next 3 commands operate on a LABEL and files
    my $label = shift(@ARGV);
    die "Usage: $0 $command $label files \n" if (scalar(@ARGV)<1);
    if ($_ eq "add") {
	# do_add($label, @ARGV);
	last;
    }
    if ($_ eq "drop") {
	# do_drop($label, @ARGV);
	last;
    }
    if ($_ eq "grep") {
	# do_grep($label, @ARGV);
	last;
    }
    die "Unknown command: $command\n";
}
